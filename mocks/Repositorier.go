// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// Repositorier is an autogenerated mock type for the Repositorier type
type Repositorier struct {
	mock.Mock
}

// Commit provides a mock function with given fields: tx
func (_m *Repositorier) Commit(tx *sqlx.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sqlx.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransaction provides a mock function with given fields: ctx
func (_m *Repositorier) NewTransaction(ctx context.Context) (*sqlx.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for NewTransaction")
	}

	var r0 *sqlx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sqlx.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sqlx.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackOnError provides a mock function with given fields: tx, err
func (_m *Repositorier) RollbackOnError(tx *sqlx.Tx, err error) error {
	ret := _m.Called(tx, err)

	if len(ret) == 0 {
		panic("no return value specified for RollbackOnError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sqlx.Tx, error) error); ok {
		r0 = rf(tx, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositorier creates a new instance of Repositorier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositorier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repositorier {
	mock := &Repositorier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
