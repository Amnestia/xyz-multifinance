// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	paseto "github.com/amnestia/xyz-multifinance/internal/lib/paseto"
	mock "github.com/stretchr/testify/mock"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

// Extract provides a mock function with given fields: _a0
func (_m *Handler) Extract(_a0 string) (paseto.Payload, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Extract")
	}

	var r0 paseto.Payload
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (paseto.Payload, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) paseto.Payload); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(paseto.Payload)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Generate provides a mock function with given fields: _a0
func (_m *Handler) Generate(_a0 paseto.Payload) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(paseto.Payload) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(paseto.Payload) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(paseto.Payload) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
