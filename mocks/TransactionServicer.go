// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/amnestia/xyz-multifinance/internal/domain/model/common"

	mock "github.com/stretchr/testify/mock"

	transactionmodel "github.com/amnestia/xyz-multifinance/internal/domain/model/transaction"
)

// TransactionServicer is an autogenerated mock type for the TransactionServicer type
type TransactionServicer struct {
	mock.Mock
}

// CreateNewTransaction provides a mock function with given fields: _a0, _a1
func (_m *TransactionServicer) CreateNewTransaction(_a0 context.Context, _a1 *transactionmodel.TransactionRequest) *common.DefaultResponse {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewTransaction")
	}

	var r0 *common.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *transactionmodel.TransactionRequest) *common.DefaultResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.DefaultResponse)
		}
	}

	return r0
}

// NewTransactionServicer creates a new instance of TransactionServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionServicer {
	mock := &TransactionServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
