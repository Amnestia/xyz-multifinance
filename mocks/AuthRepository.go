// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	authmodel "github.com/amnestia/xyz-multifinance/internal/domain/model/auth"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// Auth provides a mock function with given fields: ctx, email
func (_m *AuthRepository) Auth(ctx context.Context, email string) (*authmodel.Account, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for Auth")
	}

	var r0 *authmodel.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*authmodel.Account, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *authmodel.Account); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authmodel.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with given fields: tx
func (_m *AuthRepository) Commit(tx *sqlx.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sqlx.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPartner provides a mock function with given fields: ctx, clientID
func (_m *AuthRepository) GetPartner(ctx context.Context, clientID string) (*authmodel.Partner, error) {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetPartner")
	}

	var r0 *authmodel.Partner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*authmodel.Partner, error)); ok {
		return rf(ctx, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *authmodel.Partner); ok {
		r0 = rf(ctx, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authmodel.Partner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransaction provides a mock function with given fields: ctx
func (_m *AuthRepository) NewTransaction(ctx context.Context) (*sqlx.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for NewTransaction")
	}

	var r0 *sqlx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sqlx.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sqlx.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterNewAccount provides a mock function with given fields: ctx, tx, acc
func (_m *AuthRepository) RegisterNewAccount(ctx context.Context, tx *sqlx.Tx, acc *authmodel.Account) (int64, error) {
	ret := _m.Called(ctx, tx, acc)

	if len(ret) == 0 {
		panic("no return value specified for RegisterNewAccount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, *authmodel.Account) (int64, error)); ok {
		return rf(ctx, tx, acc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, *authmodel.Account) int64); ok {
		r0 = rf(ctx, tx, acc)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.Tx, *authmodel.Account) error); ok {
		r1 = rf(ctx, tx, acc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterNewPartner provides a mock function with given fields: ctx, tx, acc
func (_m *AuthRepository) RegisterNewPartner(ctx context.Context, tx *sqlx.Tx, acc *authmodel.Partner) (int64, error) {
	ret := _m.Called(ctx, tx, acc)

	if len(ret) == 0 {
		panic("no return value specified for RegisterNewPartner")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, *authmodel.Partner) (int64, error)); ok {
		return rf(ctx, tx, acc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, *authmodel.Partner) int64); ok {
		r0 = rf(ctx, tx, acc)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.Tx, *authmodel.Partner) error); ok {
		r1 = rf(ctx, tx, acc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackOnError provides a mock function with given fields: tx, err
func (_m *AuthRepository) RollbackOnError(tx *sqlx.Tx, err error) error {
	ret := _m.Called(tx, err)

	if len(ret) == 0 {
		panic("no return value specified for RollbackOnError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sqlx.Tx, error) error); ok {
		r0 = rf(tx, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
