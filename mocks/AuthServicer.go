// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	authmodel "github.com/amnestia/xyz-multifinance/internal/domain/model/auth"
	common "github.com/amnestia/xyz-multifinance/internal/domain/model/common"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AuthServicer is an autogenerated mock type for the AuthServicer type
type AuthServicer struct {
	mock.Mock
}

// Auth provides a mock function with given fields: _a0, _a1
func (_m *AuthServicer) Auth(_a0 context.Context, _a1 *authmodel.ConsumerAuthRequest) *authmodel.LoginResponse {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Auth")
	}

	var r0 *authmodel.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *authmodel.ConsumerAuthRequest) *authmodel.LoginResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authmodel.LoginResponse)
		}
	}

	return r0
}

// CreateNewPartner provides a mock function with given fields: ctx, req
func (_m *AuthServicer) CreateNewPartner(ctx context.Context, req *authmodel.Partner) *authmodel.NewPartnerResponse {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewPartner")
	}

	var r0 *authmodel.NewPartnerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *authmodel.Partner) *authmodel.NewPartnerResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authmodel.NewPartnerResponse)
		}
	}

	return r0
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *AuthServicer) Register(_a0 context.Context, _a1 *authmodel.RegisterRequest) *common.DefaultResponse {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *common.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *authmodel.RegisterRequest) *common.DefaultResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.DefaultResponse)
		}
	}

	return r0
}

// NewAuthServicer creates a new instance of AuthServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthServicer {
	mock := &AuthServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
